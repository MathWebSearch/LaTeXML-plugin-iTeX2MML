#!/usr/bin/perl -w
# -*- mode: CPerl -*-
package LaTeXML::Package::Pool;
use strict;
use warnings;

use LaTeXML::Package;
RequirePackage('amsmath');
RequirePackage('cancel');


# this is a try to get the itex specfic stuff workin
# resources : https://jblevins.org/notes/itex
# and https://golem.ph.utexas.edu/~distler/blog/itex2MMLcommands.html

# the array is the amsmath matrix
# at this point this is the only way i got the \array{} working
DefMacro('\array{}', '\begin{matrix}#1\end{matrix}');
# Ignore the arrayopts because I think it's not relavant for the cmml
DefMacro('\arrayopts{}','');

# same as for the svg env don't know what to do with it,
# but it seems not to work for all svg enviroments
DefEnvironment('{svg}','');

#operators
DefMacro('\bottom', '\bot');
# not sure about MULOP, see ncatlab.org/nlab/show/multiplicative+disjunction
DefMath('\invamp', "\x{214B}", role => 'MULOP', meaning => 'multiplicative disjunction');
DefMacro('\parr','\invamp');

DefMacro('\minusb', '\boxminus');
DefMacro('\plusb', '\boxplus');
DefMacro('\timesb', '\boxtimes');

DefMacro('\union', '\cup');
DefMacro('\intersection', '\cap');

DefMath('\VDash', "\x{22AB}", role => 'RELOP');

DefMacro('\Del', '\nabla');
DefMacro('\odash', '\circleddash');
DefMacro('\Vbar', '\Perp');

#dots from left down to up right
DefMathI('\udots', undef, "\x{22F0}", role => 'ID');

# Symbols
DefMacro('\empty', '\emptyset');
DefMacro('\infinity', '\infty');
# maybe this fixes the \b in a lot of \b < a formulae
DefMacro('\b', 'b');
# fix for these symboles stolen from txfonts.sty.ltxml and stmaryrd.sty.ltxml
# I don't know why they are not found although the packages are
# preloaded/included
DefMath('\nequiv', "\x{2262}", meaning => 'not-equivalent-to', role => 'RELOP');
DefMathI('\sslash', undef, "\x{2AFD}", role => 'RELOP');

# arrow macros
DefMacro('\embedsin', '\hookrightarrow');
DefMacro('\map', '\mapsto');

DefMacro('\nearr', '\nearrow');
DefMacro('\nwarr', '\nwarrow');

DefMacro('\searr', '\searrow');
DefMacro('\swarr', '\swarrow');

# Fix for doubled Arrows?
DefMath('\neArrow', "\x{21D7}", role => 'ARROW');
DefMacro('\neArr', '\neArrow');

DefMath('\nwArrow', "\x{21D6}", role => 'ARROW');
DefMacro('\nwArr', '\nwArrow');

DefMath('\swArrow', "\x{21D9}", role => 'ARROW');
DefMacro('\swArr', '\swArrow');

DefMath('\seArrow', "\x{21D8}", role => 'ARROW');
DefMacro('\seArr', '\seArrow');

DefMacro('\darr', '\downarrow');
DefMacro('\uparr', '\uparrow');
DefMacro('\downuparrow', '\updownarrow');
DefMacro('\duparr', '\updownarrow');
DefMacro('\updarr', '\updownarrow');
DefMath('\curvearrowbotright', "\x{293b}", role => 'ARROW');
DefMath('\righttoleftarrow', "\x{27f2}", role => 'ARROW');
DefMath('\lefttorightarrow', "\x{27f3}" , role => 'ARROW');

# less and greater
DefMacro('\lt', '<');
DefMacro('\gt', '>');


#Large Operators
DefMacro('\Union', '\bigcup');
DefMacro('\Intersection', '\bigcap');
DefMacro('\Oplus', '\bigoplus');
DefMacro('\Otimes', '\bigotimes');
DefMacro('\Wedge', '\bigwedge');
DefMacro('\Vee', '\bigvee');

DefMacro('\coproduct', '\coprod');
DefMacro('\product', '\prod');
# integrals
DefMacro('\integral', '\int');
DefMacro('\doubleintegral', '\iint');
DefMacro('\tripleintegral', '\iiint');
DefMacro('\quadrupleintegral', '\iiiint');
DefMacro('\contourintegral', '\oint');
DefMacro('\conint', '\oint');

# The 'greek letters'
# don't know if this is clever, may replace this with including texvc.sty??
DefMathI('\omicron', undef,  "\x{03BF}");

DefMathI('\Alpha', undef, "\x{0391}");
DefMathI('\Beta',  undef, "\x{0392}");

DefMathI('\Zeta', undef,  "\x{0396}");
DefMathI('\Eta',     undef, "\x{0397}");

DefMathI('\Iota',  undef, "\x{0399}");
DefMathI('\Kappa', undef, "\x{039A}");

DefMathI('\Mu', undef, "\x{039C}");
DefMathI('\Nu', undef, "\x{039D}");

DefMathI('\Rho', undef, "\x{03A1}");
DefMathI('\Tau', undef, "\x{03A4}");
DefMacro('\Upsi', '\Upsilon');

# Accents
DefMacro('\closure{}', '\overline{#1}');
DefMacro('\widebar{}', '\overline{#1}');
DefMacro('\widevec{}', '\overrightarrow{#1}');
DefMath('\widecheck Digested', UTF(0x2C7), operator_role => 'OVERACCENT');
DefMacro('\slash{}', '\cancel{#1}');

# Delimeter
DefMacro('\lang', '\langle');
DefMacro('\rang', '\rangle');
DefMathI('\llangle', undef, "\x{27EA}", role => 'OPEN', stretchy => 'false');
DefMathI('\rrangle', undef, "\x{27EB}", role => 'CLOSE', stretchy => 'false');

# Fractions and stuff
DefMacro('\underoverset{}{}{}', '\underset{#1}{\overset{#2}{#3}}');
#this is also inspired by the \root in TeX.pool
DefConstructor('\root{}{}', "<ltx:XMApp><ltx:XMTok meaning='nth-root'/>"
    . "<ltx:XMArg>#1</ltx:XMArg><ltx:XMArg>#2</ltx:XMArg>"
    . "</ltx:XMApp>");

#helper function for that tensor /multiscript stuff
#just takes that gullet thingy and returns the Tokens list of just the
#sub/superscripts, i'll guess every thing else is ignored
sub scriptsReader{
    my ($gullet) = @_;
    my @scripts = ();
    # in the second argument are the sub/superscripts
    while(my $tok = $gullet->readToken()){
        my $csname = $tok->getCSName;
        if ($csname eq 'Subscript' ){
            my $arg = $gullet->readArg();
            my $str = $arg->toString;
            my $ft = Invocation(T_CS('\@@FLOATINGSUBSCRIPT'), $arg);
            push(@scripts, $ft);
        }
        elsif ($csname eq 'Superscript' ){
            my $arg = $gullet->readArg();
            my $str = $arg->toString;
            my $ft = Invocation(T_CS('\@@FLOATINGSUPERSCRIPT'), $arg);
            push(@scripts, $ft);
        }
        elsif($csname eq 'End'){
            last;
        }
    }
    return Tokens(@scripts);
}

# These Bindings are inspiered by the \sideset binding from the
# amsmath.sty.ltxml
# I'll guess the itex2mml implementation is here:
# https://golem.ph.utexas.edu/~distler/code/itexToMML/view/head:/itex-src/itex2MML.y#L1136
# I hope this stuff does something similar
DefMacro('\tensor', sub {
        my ($gullet) = @_;
        $gullet->closeMouth unless ($gullet->getMouth->hasMoreInput);

        #first argument is the base
        my $arg = $gullet->readArg();
        my $base = $arg->toString;
        my $tokens = scriptsReader($gullet);
        return Invocation( T_CS('\@@tensor'), $base, $tokens);
    }
);
DefConstructor('\@@tensor{}{}', sub {
        my ($document, $base, $scripts) = @_;
        my $node = $document->insertElement('ltx:XMArg', $base);
        my $ch = $document->getFirstChildElement($node);
        my $level = 0;
        my $last = 'SUPERSCRIPT';
        foreach my $script ($scripts->unlist){
            if(my $scriptop = IsScript($script)){
                $last++ if $$scriptop[1] eq $last;
                $node = sidesetWrap($document, $node, 'post', $$scriptop[1], $level, $script);
                $last = $$scriptop[1];
            }
            else{
                Warn('expected', '<sub/supserscript>', $document,
                  "Expected a sub/superscript in the prescripts of \\tensor",
                  "Got " . Stringify($script));
            }
        }
    }
);

DefMacro('\multiscripts', sub {
        my ($gullet) = @_;
        $gullet->closeMouth unless ($gullet->getMouth->hasMoreInput);
        my $pre = scriptsReader($gullet);
        my $arg = $gullet->readArg();
        my $base = $arg->toString;
        my $post = scriptsReader($gullet);
        return Invocation( T_CS('\@@multiscripts'), $pre, $base, $post);
});

DefConstructor('\@@multiscripts{}{}{}', sub {
        my ($document, $pre, $base, $post) = @_;
        my $node = $document->insertElement('ltx:XMArg', $base);
        my $ch = $document->getFirstChildElement($node);

        my $level = 0;
        my $last = 'SUPERSCRIPT';

        foreach my $script ($post->unlist){
            if(my $scriptop = IsScript($script)){
                $last++ if $$scriptop[1] eq $last;
                $node = sidesetWrap($document, $node, 'post', $$scriptop[1], $level, $script);
                $last = $$scriptop[1];
            }
            else{
                Warn('expected', '<sub/supserscript>', $document,
                  "Expected a sub/superscript in the prescripts of \\multiscript",
                  "Got " . Stringify($script));
            }
        }
        $level = 0;
        $last = 'SUPERSCRIPT';

        foreach my $script (reverse $pre->unlist){
            if(my $scriptop = IsScript($script)){
                $last++ if $$scriptop[1] eq $last;
                $node = sidesetWrap($document, $node, 'pre', $$scriptop[1], $level, $script);
                $last = $$scriptop[1];
            }
            else{
                Warn('expected', '<sub/supserscript>', $document,
                  "Expected a sub/superscript in the prescripts of \\multiscript",
                  "Got " . Stringify($script));
            }
        }
    }
);

1;
